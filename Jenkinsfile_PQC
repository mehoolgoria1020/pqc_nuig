pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        SSH_CREDENTIALS        = credentials('ssh-ed25519-credentials-id')
        PATH                   = "/usr/local/bin:/opt/homebrew/bin:$PATH"
    }

    stages {
        stage('Checkout') {
            steps {
                sshagent(credentials: ['ssh-ed25519-credentials-id']) {
                    sh '''
                        echo "Host localhost\\n  User mehoolgoria\\n  Port 2222\\n  KexAlgorithms mlkem512-sha256\\n  IdentityFile /Users/mehoolgoria/.ssh/id_ed25519" > ~/.ssh/config
                        chmod 600 ~/.ssh/config
                        /usr/local/bin/ssh -T -p 2222 mehoolgoria@localhost || true
                        git clone ssh://mehoolgoria@localhost:2222/~/pqc_nuig_local.git .
                        git checkout main
                    '''
                }
            }
        }

        stage('Setup Python Environment') {
            steps {
                sh '''
                    python3 --version || python --version
                    python3 -m venv venv || python -m venv venv
                    source venv/bin/activate
                    pip install --upgrade pip
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    source venv/bin/activate
                    pip install --no-cache-dir -r requirements.txt
                '''
            }
        }

        stage('Test') {
            steps {
                sh '''
                    source venv/bin/activate
                    python -m unittest discover -s tests
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    docker --version
                    docker info
                    docker build -t 9977262607/pqc-flask-demo:latest .
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push 9977262607/pqc-flask-demo:latest
                        docker logout
                    '''
                }
            }
        }
    }

    post {
        always {
            sh '''
                if [ -d "venv" ]; then
                    rm -rf venv
                fi
                docker image prune -f || echo "Docker image cleanup failed"
            '''
            cleanWs()
        }

        success {
            echo 'Pipeline completed successfully!'
            sh '''
                echo "Docker images:"
                docker images | grep pqc-flask-demo || echo "No pqc-flask-demo images found"
            '''
        }

        failure {
            echo 'Pipeline failed!'
            sh '''
                echo "=== Docker Status ==="
                docker --version || echo "Docker not available"
                docker info || echo "Docker daemon not running"

                echo "=== Python Status ==="
                python3 --version || python --version || echo "Python not available"

                echo "=== Current Directory ==="
                ls -la

                echo "=== Requirements File ==="
                cat requirements.txt || echo "requirements.txt not found"
            '''
        }
    }
}
