pipeline {
    agent any  // Use built-in Jenkins node (MacBook)
    
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        SSH_CREDENTIALS = credentials('ssh-ed25519-credentials-id')
        PATH = "/usr/local/bin:/opt/homebrew/bin:$PATH"
    }
    
    stages {
        stage('Checkout') {
            steps {
                sshagent(credentials: ['ssh-ed25519-credentials-id']) {
                    sh '''
                        # Configure SSH to use mlkem512-sha256 for GitHub
                        echo "Host github.com\n  KexAlgorithms mlkem512-sha256\n  Port 22\n  User git" > ~/.ssh/config
                        chmod 600 ~/.ssh/config
                        
                        # Test SSH connection to GitHub
                        /usr/local/bin/ssh -T git@github.com || true
                        
                        # Clone repository using oqs-openssh
                        git clone git@github.com:mehoolgoria1020/pqc_nuig.git
                        cd pqc_nuig
                        git checkout main
                    '''
                }
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                sh '''
                    cd pqc_nuig
                    python3 --version || python --version
                    python3 -m venv venv || python -m venv venv
                    source venv/bin/activate
                    pip install --upgrade pip
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh '''
                    cd pqc_nuig
                    source venv/bin/activate
                    pip install --no-cache-dir -r requirements.txt
                '''
            }
        }
        
        stage('Test') {
            steps {
                sh '''
                    cd pqc_nuig
                    source venv/bin/activate
                    python -m unittest discover -s tests
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh '''
                    cd pqc_nuig
                    docker --version
                    docker info
                    docker build -t 9977262607/pqc-flask-demo:latest .
                '''
            }
        }
        
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push 9977262607/pqc-flask-demo:latest
                        docker logout
                    '''
                }
            }
        }
    }
    
    post {
        always {
            sh '''
                cd pqc_nuig
                if [ -d "venv" ]; then
                    rm -rf venv
                fi
                docker image prune -f || echo "Docker image cleanup failed"
            '''
            cleanWs()
        }
        
        success {
            echo 'Pipeline completed successfully!'
            sh '''
                echo "Docker images:"
                docker images | grep pqc-flask-demo || echo "No pqc-flask-demo images found"
            '''
        }
        
        failure {
            echo 'Pipeline failed!'
            sh '''
                echo "=== Docker Status ==="
                docker --version || echo "Docker not available"
                docker info || echo "Docker daemon not running"
                
                echo "=== Python Status ==="
                python3 --version || python --version || echo "Python not available"
                
                echo "=== Current Directory ==="
                ls -la
                
                echo "=== Requirements File ==="
                cat pqc_nuig/requirements.txt || echo "requirements.txt not found"
            '''
        }
    }
}
